import streamlit as st
from pprint import pprint
import pandas as pd
import sqlite3
import json
import os


from pickleshare import stat
path = "/content/pulse/data/aggregated/transaction/country/india/state/"
Ag_state_list = os.listdir(path)
(1)------------------------------------------------------------------------------------------------------------------------------------------------------------------

clime ={'state':[], 'year':[], 'quater':[] ,'transaction_type':[],'transaction_count':[], 'transaction_amount':[]}

for i in Ag_state_list:
  p_i = path+ i + "/"
  Ag_year = os.listdir(p_i)

  for j in Ag_year:
    p_j = p_i+ j +"/"
    Ag_year_list = os.listdir(p_j)

    for k in Ag_year_list:
      p_k = p_j+ k
      data = open(p_k, 'r')
      d = json.load(data)

      for z in d['data']['transactionData']:
        name = z['name']
        count = z['paymentInstruments'][0]['count']
        amount =z['paymentInstruments'][0]['amount']
        clime['transaction_type'].append(name)
        clime['transaction_count'].append(count)
        clime['transaction_amount'].append(amount)
        clime['state'].append(i)
        clime['year'].append(j)
        clime['quater'].append(int(k.strip('.json')))

Ag_state_df = pd.DataFrame(clime)

(2)-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

path_2 = "/content/pulse/data/aggregated/user/country/india/state/"

Agg_user_state_list = os.listdir(path_2)

Agg_user = {'State': [], 'Year': [], 'Quarter': [], 'Brands': [], 'User_Count': [], 'User_Percentage': []}

for i in Agg_user_state_list:
    p_i = path_2 + i + "/"
    Agg_yr = os.listdir(p_i)

    for j in Agg_yr:
        p_j = p_i + j + "/"
        Agg_yr_list = os.listdir(p_j)

        for k in Agg_yr_list:
            p_k = p_j + k
            Data = open(p_k, 'r')
            B = json.load(Data)

            try:
                for l in B["data"]["usersByDevice"]:
                    brand_name = l["brand"]
                    count_ = l["count"]
                    ALL_percentage = l["percentage"]
                    Agg_user["State"].append(i)
                    Agg_user["Year"].append(j)
                    Agg_user["Quarter"].append(int(k.strip('.json')))
                    Agg_user["Brands"].append(brand_name)
                    Agg_user["User_Count"].append(count_)
                    Agg_user["User_Percentage"].append(ALL_percentage * 100)
            except:
                pass

df_aggregated_user = pd.DataFrame(Agg_user)

(3)----------------------------------------------------------------------------------------------------------------------------------------------------------

path_3 = "/content/pulse/data/map/transaction/hover/country/india/state/"
map_tra_state_list = os.listdir(path_3)

map_tra = {'State': [], 'Year': [], 'Quarter': [], 'District': [], 'Transaction_Count': [], 'Transaction_Amount': []}

for i in map_tra_state_list:
    p_i = path_3 + i + "/"
    Agg_yr = os.listdir(p_i)

    for j in Agg_yr:
        p_j = p_i + j + "/"
        Agg_yr_list = os.listdir(p_j)

        for k in Agg_yr_list:
            p_k = p_j + k
            Data = open(p_k, 'r')
            C = json.load(Data)

            for l in C["data"]["hoverDataList"]:
                District = l["name"]
                count = l["metric"][0]["count"]
                amount = l["metric"][0]["amount"]
                map_tra['State'].append(i)
                map_tra['Year'].append(j)
                map_tra['Quarter'].append(int(k.strip('.json')))
                map_tra["District"].append(District)
                map_tra["Transaction_Count"].append(count)
                map_tra["Transaction_Amount"].append(amount)

df_map_transaction = pd.DataFrame(map_tra)


(4)----------------------------------------------------------------------------------------------------------------------------------------

path_4 = "/content/pulse/data/map/user/hover/country/india/state/"
map_user_state_list = os.listdir(path_4)

map_user = {"State": [], "Year": [], "Quarter": [], "District": [], "Registered_User": []}

for i in map_user_state_list:
    p_i = path_4 + i + "/"
    Agg_yr = os.listdir(p_i)

    for j in Agg_yr:
        p_j = p_i + j + "/"
        Agg_yr_list = os.listdir(p_j)

        for k in Agg_yr_list:
            p_k = p_j + k
            Data = open(p_k, 'r')
            D = json.load(Data)

            for l in D["data"]["hoverData"].items():
                district = l[0]
                registereduser = l[1]["registeredUsers"]
                map_user['State'].append(i)
                map_user['Year'].append(j)
                map_user['Quarter'].append(int(k.strip('.json')))
                map_user["District"].append(district)
                map_user["Registered_User"].append(registereduser)

df_map_user = pd.DataFrame(map_user)

(5)------------------------------------------------------------------------------------------------------------------------------------------------------

path_5 = "/content/pulse/data/top/transaction/country/india/state/"
top_tra_state_list = os.listdir(path_5)

top_tra = {'State': [], 'Year': [], 'Quarter': [], 'District_Pincode': [], 'Transaction_count': [],
           'Transaction_amount': []}

for i in top_tra_state_list:
    p_i = path_5 + i + "/"
    Agg_yr = os.listdir(p_i)

    for j in Agg_yr:
        p_j = p_i + j + "/"
        Agg_yr_list = os.listdir(p_j)

        for k in Agg_yr_list:
            p_k = p_j + k
            Data = open(p_k, 'r')
            E = json.load(Data)

            for l in E['data']['pincodes']:
                Name = l['entityName']
                count = l['metric']['count']
                amount = l['metric']['amount']
                top_tra['State'].append(i)
                top_tra['Year'].append(j)
                top_tra['Quarter'].append(int(k.strip('.json')))
                top_tra['District_Pincode'].append(Name)
                top_tra['Transaction_count'].append(count)
                top_tra['Transaction_amount'].append(amount)

df_top_transaction = pd.DataFrame(top_tra)

(6)----------------------------------------------------------------------------------------------------------------------------------------------------


path_6 = "/content/pulse/data/top/user/country/india/state/"
top_user_state_list = os.listdir(path_6)

top_user = {'State': [], 'Year': [], 'Quarter': [], 'District_Pincode': [], 'Registered_User': []}

for i in top_user_state_list:
    p_i = path_6 + i + "/"
    Agg_yr = os.listdir(p_i)

    for j in Agg_yr:
        p_j = p_i + j + "/"
        Agg_yr_list = os.listdir(p_j)

        for k in Agg_yr_list:
            p_k = p_j + k
            Data = open(p_k, 'r')
            F = json.load(Data)

            for l in F['data']['pincodes']:
                Name = l['name']
                registeredUser = l['registeredUsers']
                top_user['State'].append(i)
                top_user['Year'].append(j)
                top_user['Quarter'].append(int(k.strip('.json')))
                top_user['District_Pincode'].append(Name)
                top_user['Registered_User'].append(registeredUser)

df_top_user = pd.DataFrame(top_user)

(sqlite3)-------------------------------------------------------------------------------------------------------------------------------------------

sqlite3

conn = sqlite3.connect('your_database_name.db')

# Create tables for each data frame
df_aggregated_user.to_sql('aggregated_user', conn, if_exists='replace', index=False)
df_map_transaction.to_sql('map_transaction', conn, if_exists='replace', index=False)
df_map_user.to_sql('map_user', conn, if_exists='replace', index=False)
df_top_transaction.to_sql('top_transaction', conn, if_exists='replace', index=False)
df_top_user.to_sql('top_user', conn, if_exists='replace', index=False)
df_state_df.to_sql('state_df', conn, if_exists='replace', index=False)


conn.commit()
conn.close()

import streamlit as st
import sqlite3

# Connect to your SQLite database
conn = sqlite3.connect('your_database_name.db')

# Create Streamlit app
st.title("Database Queries")

# Define functions for queries
def execute_query(query):
    cursor = conn.cursor()
    cursor.execute(query)
    result = cursor.fetchall()
    cursor.close()
    return result


(streamlit and quries)--------------------------------------------------------------------------------------------------------------

# Example Queries
st.header("Example Queries")

# Query 1: Select all rows from the 'aggregated_user' table
if st.button("Select all from aggregated_user"):
    query = "SELECT * FROM aggregated_user"
    result = execute_query(query)
    st.write(result)

# Query 2: Select specific columns from the 'map_transaction' table
if st.button("Select columns from map_transaction"):
    query = "SELECT State, Year, District, Transaction_Count FROM map_transaction"
    result = execute_query(query)
    st.write(result)

# Query 3: Filter data based on conditions
if st.button("Filter top_transaction data"):
    query = "SELECT * FROM top_transaction WHERE Transaction_count > 100"
    result = execute_query(query)
    st.write(result)

# Add more queries as needed

# Close the database connection
conn.close()



     
